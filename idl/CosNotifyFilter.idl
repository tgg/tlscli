//Notification Specification, v1.1 - OMG IDL CosNotifyFilter File
//Object Management Group, Inc.
//Copyright © 1998, BEA Systems, Inc.
//Copyright © 1998, Borland International
//Copyright © 1998, Cooperative Research Centre for Distributed Systems Technology (DSTC Pty Ltd). 
//Copyright © 1998, Expersoft Corporation
//Copyright © 1998, FUJITSU LIMITED
//Copyright © 1998, GMD Fokus
//Copyright © 1998, International Business Machines Corporation
//Copyright © 1998, International Computers Limited
//Copyright © 1998, Iona Technologies Ltd.
//Copyright © 1998, NEC Corporation
//Copyright © 1998, Nortel Technology
//Copyright © 2002, Object Management Group, Inc.
//Copyright © 1998, Oracle Corporation
//Copyright © 1998, TIBCO Software, Inc.
//The companies listed above have granted to the Object Management Group, Inc. 
//(OMG) a nonexclusive, royalty-free, paid up, worldwide license to copy and 
//distribute this document and to modify this document and distribute copies of 
//the modified version. Each of the copyright holders listed above has agreed 
//that no person shall be deemed to have infringed the copyright in the included 
//material of any such copyright holder by reason of having used the 
//specification set forth herein or having conformed any computer software to 
//the specification. 
//
//This file contains OMG IDL from the Notification Service Specification, v1.1.
//OMG regularly publishes a summary file that contains all the "code" parts of 
//an OMG formal document. Every formal document line that is IDL, PIDL, or 
//language code is included in the summary file. The reason for such a listing 
//is to give readers an electronic version of the "code" so that they can 
//extract pieces of it. Readers might want to test an example, include it in 
//their own code, or use it for documentation purposes. Having the code lines 
//available electronically means there is less likelihood of a transcription 
//error. 

#ifndef _COS_NOTIFY_FILTER_IDL_
#define _COS_NOTIFY_FILTER_IDL_

#include <CosNotifyComm.idl>

/* Hack for ORBit.load_file */
#ifndef __ORBIT_IDL__
#define TypeCode CORBA::TypeCode
#endif

#pragma prefix "omg.org"

module CosNotifyFilter {

typedef long ConstraintID;

struct ConstraintExp {
	CosNotification::EventTypeSeq event_types;
	string constraint_expr;
};

typedef sequence<ConstraintID> ConstraintIDSeq;
typedef sequence<ConstraintExp> ConstraintExpSeq;

struct ConstraintInfo {
	ConstraintExp constraint_expression;
	ConstraintID constraint_id;
};

typedef sequence<ConstraintInfo> ConstraintInfoSeq;

struct MappingConstraintPair {
	ConstraintExp constraint_expression;
	any result_to_set;
};

typedef sequence<MappingConstraintPair> MappingConstraintPairSeq;

struct MappingConstraintInfo {
	ConstraintExp constraint_expression;
	ConstraintID constraint_id;
		any value;
};

typedef sequence<MappingConstraintInfo> MappingConstraintInfoSeq;

typedef long CallbackID;
typedef sequence<CallbackID> CallbackIDSeq;

exception UnsupportedFilterableData {}; 
exception InvalidGrammar {};
exception InvalidConstraint {ConstraintExp constr;};
exception DuplicateConstraintID {ConstraintID id;};

exception ConstraintNotFound {ConstraintID id;};
exception CallbackNotFound {};

exception InvalidValue {ConstraintExp constr; any value;};

interface Filter { 

readonly attribute string constraint_grammar; 

ConstraintInfoSeq add_constraints (
		in ConstraintExpSeq constraint_list)
	raises (InvalidConstraint);

void modify_constraints (
		in ConstraintIDSeq del_list,
		in ConstraintInfoSeq modify_list)
	raises (InvalidConstraint, ConstraintNotFound);

ConstraintInfoSeq get_constraints(
		in ConstraintIDSeq id_list)
	raises (ConstraintNotFound);

ConstraintInfoSeq get_all_constraints();

void remove_all_constraints();

void destroy();

boolean match ( in any filterable_data )
	raises (UnsupportedFilterableData);

boolean match_structured (
		in CosNotification::StructuredEvent filterable_data )
	raises (UnsupportedFilterableData);


boolean match_typed (
		in CosNotification::PropertySeq filterable_data )
	raises (UnsupportedFilterableData);

CallbackID attach_callback (
		in CosNotifyComm::NotifySubscribe callback);

void detach_callback ( in CallbackID callback)
	raises ( CallbackNotFound );

CallbackIDSeq get_callbacks();

}; // Filter 

interface MappingFilter {

readonly attribute string constraint_grammar;

readonly attribute TypeCode value_type;

readonly attribute any default_value;

MappingConstraintInfoSeq add_mapping_constraints (
		in MappingConstraintPairSeq pair_list)
	raises (InvalidConstraint, InvalidValue);

void modify_mapping_constraints (
		in ConstraintIDSeq del_list,
		in MappingConstraintInfoSeq modify_list)
	raises (InvalidConstraint, InvalidValue,
		ConstraintNotFound);

MappingConstraintInfoSeq get_mapping_constraints (
		in ConstraintIDSeq id_list)
	raises (ConstraintNotFound);

MappingConstraintInfoSeq get_all_mapping_constraints();

void remove_all_mapping_constraints();

void destroy();

boolean match ( in any filterable_data,
		out any result_to_set )
	raises (UnsupportedFilterableData);

boolean match_structured (
		in CosNotification::StructuredEvent filterable_data,
		out any result_to_set)
	raises (UnsupportedFilterableData);

boolean match_typed (
		in CosNotification::PropertySeq filterable_data,
		out any result_to_set)
	raises (UnsupportedFilterableData);

}; // MappingFilter

interface FilterFactory {

Filter create_filter (
		in string constraint_grammar)
	raises (InvalidGrammar);

MappingFilter create_mapping_filter (
		in string constraint_grammar,
		in any default_value)
	raises(InvalidGrammar);

}; // FilterFactory

typedef long FilterID;
typedef sequence<FilterID> FilterIDSeq;

exception FilterNotFound {};

interface FilterAdmin {

FilterID add_filter ( in Filter new_filter );

void remove_filter ( in FilterID filter )
	raises ( FilterNotFound );

Filter get_filter ( in FilterID filter )
	raises ( FilterNotFound );

FilterIDSeq get_all_filters();

void remove_all_filters();

}; // FilterAdmin

}; // CosNotifyFilter

#endif
