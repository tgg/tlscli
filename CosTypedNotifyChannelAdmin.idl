//Notification Specification, v1.1 - OMG IDL CosTypedNotifyChannelAdmin File
//Object Management Group, Inc.
//Copyright © 1998, BEA Systems, Inc.
//Copyright © 1998, Borland International
//Copyright © 1998, Cooperative Research Centre for Distributed Systems Technology (DSTC Pty Ltd). 
//Copyright © 1998, Expersoft Corporation
//Copyright © 1998, FUJITSU LIMITED
//Copyright © 1998, GMD Fokus
//Copyright © 1998, International Business Machines Corporation
//Copyright © 1998, International Computers Limited
//Copyright © 1998, Iona Technologies Ltd.
//Copyright © 1998, NEC Corporation
//Copyright © 1998, Nortel Technology
//Copyright © 2002, Object Management Group, Inc.
//Copyright © 1998, Oracle Corporation
//Copyright © 1998, TIBCO Software, Inc.
//The companies listed above have granted to the Object Management Group, Inc. 
//(OMG) a nonexclusive, royalty-free, paid up, worldwide license to copy and 
//distribute this document and to modify this document and distribute copies of 
//the modified version. Each of the copyright holders listed above has agreed 
//that no person shall be deemed to have infringed the copyright in the included 
//material of any such copyright holder by reason of having used the 
//specification set forth herein or having conformed any computer software to 
//the specification. 
//
//This file contains OMG IDL from the Notification Service Specification, v1.1.
//OMG regularly publishes a summary file that contains all the "code" parts of 
//an OMG formal document. Every formal document line that is IDL, PIDL, or 
//language code is included in the summary file. The reason for such a listing 
//is to give readers an electronic version of the "code" so that they can 
//extract pieces of it. Readers might want to test an example, include it in 
//their own code, or use it for documentation purposes. Having the code lines 
//available electronically means there is less likelihood of a transcription 
//error. 
module CosTypedNotifyChannelAdmin {

// Forward declaration
interface TypedEventChannelFactory;

typedef string Key;

interface TypedProxyPushConsumer : 
	CosNotifyChannelAdmin::ProxyConsumer, 
	CosTypedNotifyComm::TypedPushConsumer {

void connect_typed_push_supplier (
		in CosEventComm::PushSupplier push_supplier )
	raises ( CosEventChannelAdmin::AlreadyConnected );

}; // TypedProxyPushConsumer

interface TypedProxyPullSupplier : 
	CosNotifyChannelAdmin::ProxySupplier,
	CosTypedNotifyComm::TypedPullSupplier {

void connect_typed_pull_consumer (
		in CosEventComm::PullConsumer pull_consumer )
	raises ( CosEventChannelAdmin::AlreadyConnected );

}; // TypedProxyPullSupplier

interface TypedProxyPullConsumer : 
	CosNotifyChannelAdmin::ProxyConsumer,
	CosNotifyComm::PullConsumer {

void connect_typed_pull_supplier (
		in CosTypedEventComm::TypedPullSupplier pull_supplier)
	raises ( CosEventChannelAdmin::AlreadyConnected,
		CosEventChannelAdmin::TypeError );

void suspend_connection()
	raises (CosNotifyChannelAdmin::ConnectionAlreadyInactive,
		CosNotifyChannelAdmin::NotConnected);

void resume_connection()
	raises (CosNotifyChannelAdmin::ConnectionAlreadyActive,
		CosNotifyChannelAdmin::NotConnected);

}; // TypedProxyPullConsumer

interface TypedProxyPushSupplier : 
	CosNotifyChannelAdmin::ProxySupplier,
	CosNotifyComm::PushSupplier {

void connect_typed_push_consumer (
		in CosTypedEventComm::TypedPushConsumer push_consumer)
	raises ( CosEventChannelAdmin::AlreadyConnected,
		CosEventChannelAdmin::TypeError );

void suspend_connection()
	raises (CosNotifyChannelAdmin::ConnectionAlreadyInactive,
		CosNotifyChannelAdmin::NotConnected);


void resume_connection()
	raises (CosNotifyChannelAdmin::ConnectionAlreadyActive,
		CosNotifyChannelAdmin::NotConnected);

}; // TypedProxyPushSupplier

interface TypedConsumerAdmin : 
	CosNotifyChannelAdmin::ConsumerAdmin,
	CosTypedEventChannelAdmin::TypedConsumerAdmin {

	TypedProxyPullSupplier obtain_typed_notification_pull_supplier(
		in Key supported_interface,
		out CosNotifyChannelAdmin::ProxyID proxy_id )
	raises( CosTypedEventChannelAdmin::InterfaceNotSupported,
		CosNotifyChannelAdmin::AdminLimitExceeded );

	TypedProxyPushSupplier obtain_typed_notification_push_supplier( 
		in Key uses_interface,
		out CosNotifyChannelAdmin::ProxyID proxy_id )
	raises( CosTypedEventChannelAdmin::NoSuchImplementation,
		CosNotifyChannelAdmin::AdminLimitExceeded );

}; // TypedConsumerAdmin

interface TypedSupplierAdmin : 
	CosNotifyChannelAdmin::SupplierAdmin,
	CosTypedEventChannelAdmin::TypedSupplierAdmin {

	TypedProxyPushConsumer obtain_typed_notification_push_consumer( 
		in Key supported_interface,
		out CosNotifyChannelAdmin::ProxyID proxy_id )
	raises( CosTypedEventChannelAdmin::InterfaceNotSupported,
		CosNotifyChannelAdmin::AdminLimitExceeded );

	TypedProxyPullConsumer obtain_typed_notification_pull_consumer(
		in Key uses_interface,
		out CosNotifyChannelAdmin::ProxyID proxy_id )
	raises( CosTypedEventChannelAdmin::NoSuchImplementation,
		CosNotifyChannelAdmin::AdminLimitExceeded );

}; // TypedSupplierAdmin

interface TypedEventChannel : 
	CosNotification::QoSAdmin,
	CosNotification::AdminPropertiesAdmin,
	CosTypedEventChannelAdmin::TypedEventChannel {

readonly attribute TypedEventChannelFactory MyFactory;

readonly attribute TypedConsumerAdmin default_consumer_admin;
readonly attribute TypedSupplierAdmin default_supplier_admin;

readonly attribute CosNotifyFilter::FilterFactory
					default_filter_factory;

TypedConsumerAdmin new_for_typed_notification_consumers( 
		in CosNotifyChannelAdmin::InterFilterGroupOperator op,
		out CosNotifyChannelAdmin::AdminID id );

TypedSupplierAdmin new_for_typed_notification_suppliers(
		in CosNotifyChannelAdmin::InterFilterGroupOperator op,
		out CosNotifyChannelAdmin::AdminID id );

TypedConsumerAdmin get_consumeradmin (
		in CosNotifyChannelAdmin::AdminID id )
	raises ( CosNotifyChannelAdmin::AdminNotFound );

TypedSupplierAdmin get_supplieradmin (
		in CosNotifyChannelAdmin::AdminID id )
	raises ( CosNotifyChannelAdmin::AdminNotFound );

CosNotifyChannelAdmin::AdminIDSeq get_all_consumeradmins();
CosNotifyChannelAdmin::AdminIDSeq get_all_supplieradmins();

}; // TypedEventChannel

interface TypedEventChannelFactory {

TypedEventChannel create_typed_channel (
		in CosNotification::QoSProperties initial_QoS,
		in CosNotification::AdminProperties initial_admin,
		out CosNotifyChannelAdmin::ChannelID id)
	raises( CosNotification::UnsupportedQoS,
		CosNotification::UnsupportedAdmin );

CosNotifyChannelAdmin::ChannelIDSeq get_all_typed_channels();

TypedEventChannel get_typed_event_channel (
		in CosNotifyChannelAdmin::ChannelID id )
	raises ( CosNotifyChannelAdmin::ChannelNotFound );

}; // TypedEventChannelFactory

}; // CosTypedNotifyChannelAdmin









