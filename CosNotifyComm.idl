//Notification Specification, v1.1 - OMG IDL CosNotifyComm File
//Object Management Group, Inc.
//Copyright © 1998, BEA Systems, Inc.
//Copyright © 1998, Borland International
//Copyright © 1998, Cooperative Research Centre for Distributed Systems Technology (DSTC Pty Ltd). 
//Copyright © 1998, Expersoft Corporation
//Copyright © 1998, FUJITSU LIMITED
//Copyright © 1998, GMD Fokus
//Copyright © 1998, International Business Machines Corporation
//Copyright © 1998, International Computers Limited
//Copyright © 1998, Iona Technologies Ltd.
//Copyright © 1998, NEC Corporation
//Copyright © 1998, Nortel Technology
//Copyright © 2002, Object Management Group, Inc.
//Copyright © 1998, Oracle Corporation
//Copyright © 1998, TIBCO Software, Inc.
//The companies listed above have granted to the Object Management Group, Inc. 
//(OMG) a nonexclusive, royalty-free, paid up, worldwide license to copy and 
//distribute this document and to modify this document and distribute copies of 
//the modified version. Each of the copyright holders listed above has agreed 
//that no person shall be deemed to have infringed the copyright in the included 
//material of any such copyright holder by reason of having used the 
//specification set forth herein or having conformed any computer software to 
//the specification. 
//
//This file contains OMG IDL from the Notification Service Specification, v1.1.
//OMG regularly publishes a summary file that contains all the "code" parts of 
//an OMG formal document. Every formal document line that is IDL, PIDL, or 
//language code is included in the summary file. The reason for such a listing 
//is to give readers an electronic version of the "code" so that they can 
//extract pieces of it. Readers might want to test an example, include it in 
//their own code, or use it for documentation purposes. Having the code lines 
//available electronically means there is less likelihood of a transcription 
//error. 

#ifndef _COS_NOTIFY_COMM_IDL_
#define _COS_NOTIFY_COMM_IDL_

#include <CosEventComm.idl>

#pragma prefix "omg.org"

module CosNotifyComm {

exception InvalidEventType { CosNotification::_EventType type; };

interface NotifyPublish {

void offer_change (
		in CosNotification::EventTypeSeq added,
		in CosNotification::EventTypeSeq removed )
	raises ( InvalidEventType );

}; // NotifyPublish

interface NotifySubscribe {


void subscription_change(
		in CosNotification::EventTypeSeq added,
		in CosNotification::EventTypeSeq removed )
	raises ( InvalidEventType );

}; // NotifySubscribe

interface PushConsumer :
	NotifyPublish,
	CosEventComm::PushConsumer {
}; // PushConsumer

interface PullConsumer :
	NotifyPublish,
	CosEventComm::PullConsumer {
}; // PullConsumer

interface PullSupplier :
	NotifySubscribe,
	CosEventComm::PullSupplier {
}; // PullSupplier

interface PushSupplier :
	NotifySubscribe,
	CosEventComm::PushSupplier {
};

interface StructuredPushConsumer : NotifyPublish {

void push_structured_event(
		in CosNotification::StructuredEvent notification)
	raises(CosEventComm::Disconnected);

void disconnect_structured_push_consumer();

}; // StructuredPushConsumer

interface StructuredPullConsumer : NotifyPublish {
void disconnect_structured_pull_consumer();
}; // StructuredPullConsumer

interface StructuredPullSupplier : NotifySubscribe {

CosNotification::StructuredEvent pull_structured_event()
	raises(CosEventComm::Disconnected);
CosNotification::StructuredEvent try_pull_structured_event(
		out boolean has_event)
	raises(CosEventComm::Disconnected);

void disconnect_structured_pull_supplier();

}; // StructuredPullSupplier


interface StructuredPushSupplier : NotifySubscribe {
void disconnect_structured_push_supplier();
}; // StructuredPushSupplier

interface SequencePushConsumer : NotifyPublish {

void push_structured_events(
		in CosNotification::EventBatch notifications)
	raises(CosEventComm::Disconnected);

void disconnect_sequence_push_consumer();

}; // SequencePushConsumer

interface SequencePullConsumer : NotifyPublish {
void disconnect_sequence_pull_consumer();
}; // SequencePullConsumer

interface SequencePullSupplier : NotifySubscribe {

CosNotification::EventBatch pull_structured_events(
		in long max_number )
	raises(CosEventComm::Disconnected);

CosNotification::EventBatch try_pull_structured_events(
		in long max_number,
		out boolean has_event)
	raises(CosEventComm::Disconnected);

void disconnect_sequence_pull_supplier();

}; // SequencePullSupplier

interface SequencePushSupplier : NotifySubscribe {
void disconnect_sequence_push_supplier();
}; // SequencePushSupplier

}; // CosNotifyComm

#endif
